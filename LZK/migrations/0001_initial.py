# Generated by Django 2.2.16 on 2020-10-11 19:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import markupfield.fields
import psqlextra.manager.manager
from django.db import migrations, models

import LZK.utils
import LZK.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ability",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Ability")),
                (
                    "depth",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(1, "1"), (2, "2")],
                        null=True,
                        verbose_name="Depth",
                    ),
                ),
                (
                    "subject_related",
                    models.BooleanField(verbose_name="Subject related"),
                ),
                ("public", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Ability",
                "verbose_name_plural": "Abilities",
                "ordering": ("name",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Activity",
                "verbose_name_plural": "Activities",
                "ordering": ("name",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="CompetenceLevel",
            fields=[
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                (
                    "id",
                    models.CharField(
                        max_length=128,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Acronym",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
                ("short", models.CharField(max_length=128, verbose_name="Short")),
                ("description", models.TextField(blank=True, default="")),
            ],
            options={
                "verbose_name": "Competence level",
                "verbose_name_plural": "Competence levels",
                "ordering": ("order",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Download",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("title", models.CharField(max_length=128)),
                ("body", markupfield.fields.MarkupField(rendered_field=True)),
                (
                    "body_markup_type",
                    models.CharField(
                        choices=[
                            ("", "--"),
                            ("html", "HTML"),
                            ("plain", "Plain"),
                            ("markdown", "Markdown"),
                            ("restructuredtext", "Restructured Text"),
                        ],
                        default="restructuredtext",
                        editable=False,
                        max_length=30,
                    ),
                ),
                ("active", models.BooleanField(default=True, verbose_name="Active")),
                ("_body_rendered", models.TextField(editable=False)),
                ("file", models.FileField(upload_to="uploads/")),
            ],
            options={
                "verbose_name": "Download",
                "verbose_name_plural": "Downloads",
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "secret",
                    django_extensions.db.fields.RandomCharField(
                        blank=True, editable=False, length=32, unique=True
                    ),
                ),
                ("active", models.BooleanField(default=True, verbose_name="Active")),
                ("notes", markupfield.fields.MarkupField(rendered_field=True)),
                (
                    "notes_markup_type",
                    models.CharField(
                        choices=[
                            ("", "--"),
                            ("html", "HTML"),
                            ("plain", "Plain"),
                            ("markdown", "Markdown"),
                            ("restructuredtext", "Restructured Text"),
                        ],
                        default="restructuredtext",
                        editable=False,
                        max_length=30,
                    ),
                ),
                ("_notes_rendered", models.TextField(editable=False)),
                ("activities", models.ManyToManyField(to="LZK.Activity")),
            ],
            options={
                "verbose_name": "Feedback",
                "verbose_name_plural": "Feedbacks",
            },
        ),
        migrations.CreateModel(
            name="Level",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.CharField(
                        max_length=128,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Acronym",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Level",
                "verbose_name_plural": "Levels",
                "ordering": ("id",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="News",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("title", models.CharField(max_length=128)),
                ("body", markupfield.fields.MarkupField(rendered_field=True)),
                (
                    "body_markup_type",
                    models.CharField(
                        choices=[
                            ("", "--"),
                            ("html", "HTML"),
                            ("plain", "Plain"),
                            ("markdown", "Markdown"),
                            ("restructuredtext", "Restructured Text"),
                        ],
                        default="restructuredtext",
                        editable=False,
                        max_length=30,
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("_body_rendered", models.TextField(editable=False)),
                ("active", models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                "verbose_name": "News",
                "verbose_name_plural": "News",
                "ordering": ("-datetime",),
            },
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LZK.Activity"
                    ),
                ),
            ],
            options={
                "verbose_name": "Skill",
                "verbose_name_plural": "Skills",
                "ordering": ("name",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="Slide",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                ("title", models.CharField(max_length=128)),
                ("description", markupfield.fields.MarkupField(rendered_field=True)),
                (
                    "description_markup_type",
                    models.CharField(
                        choices=[
                            ("", "--"),
                            ("html", "HTML"),
                            ("plain", "Plain"),
                            ("markdown", "Markdown"),
                            ("restructuredtext", "Restructured Text"),
                        ],
                        default="restructuredtext",
                        editable=False,
                        max_length=30,
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("_description_rendered", models.TextField(editable=False)),
                ("image", models.ImageField(upload_to=LZK.utils.Uuid4Upload)),
            ],
            options={
                "verbose_name": "Slide",
                "verbose_name_plural": "Slides",
                "ordering": ("order",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StudyField",
            fields=[
                (
                    "id",
                    models.CharField(
                        max_length=128,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Acronym",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Study field",
                "verbose_name_plural": "Study fields",
                "ordering": ("name",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.CharField(
                        max_length=128,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Acronym",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Subject",
                "verbose_name_plural": "Subjects",
                "ordering": ("id",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="Symptom",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Symptom")),
                ("public", models.BooleanField(default=False)),
                ("subjects", models.ManyToManyField(to="LZK.Subject")),
            ],
            options={
                "verbose_name": "Symptom",
                "verbose_name_plural": "Symptoms",
                "ordering": ("name",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="System",
            fields=[
                (
                    "id",
                    models.CharField(
                        max_length=128,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Acronym",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
            ],
            options={
                "verbose_name": "System",
                "verbose_name_plural": "Systems",
                "ordering": ("name",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="Text",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                ("title", models.CharField(max_length=128)),
                ("body", markupfield.fields.MarkupField(rendered_field=True)),
                (
                    "body_markup_type",
                    models.CharField(
                        choices=[
                            ("", "--"),
                            ("html", "HTML"),
                            ("plain", "Plain"),
                            ("markdown", "Markdown"),
                            ("restructuredtext", "Restructured Text"),
                        ],
                        default="restructuredtext",
                        editable=False,
                        max_length=30,
                    ),
                ),
                (
                    "placement",
                    models.CharField(
                        choices=[
                            ("abilities", "Abilities"),
                            ("symptoms", "Symptoms"),
                            ("skills", "Skills"),
                            ("feedback-email", "Feedback (Email)"),
                        ],
                        default="abilities",
                        max_length=32,
                    ),
                ),
                ("_body_rendered", models.TextField(editable=False)),
            ],
            options={
                "verbose_name": "Text",
                "verbose_name_plural": "Texts",
            },
        ),
        migrations.CreateModel(
            name="UFID",
            fields=[
                ("id", models.PositiveIntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
            ],
            options={
                "verbose_name": "UFID",
                "verbose_name_plural": "UFIDs",
                "ordering": ("id",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name="University",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Name")),
                ("url", models.URLField()),
                (
                    "logo",
                    models.FileField(
                        upload_to=LZK.utils.Uuid4Upload,
                        validators=[
                            LZK.validators.FileValidator(
                                extensions=["svg"], mimetypes=["image/svg+xml"]
                            )
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "University",
                "verbose_name_plural": "Universities",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "university",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="LZK.University",
                        verbose_name="University",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="SymptomComment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("discarded", "Discarded"),
                            ("accepted", "Accepted"),
                        ],
                        default="open",
                        max_length=32,
                        null=True,
                    ),
                ),
                ("comment", models.TextField()),
                (
                    "feedback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LZK.Feedback"
                    ),
                ),
                (
                    "symptom",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LZK.Symptom"
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment",
                "verbose_name_plural": "Comments",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SkillComment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("discarded", "Discarded"),
                            ("accepted", "Accepted"),
                        ],
                        default="open",
                        max_length=32,
                        null=True,
                    ),
                ),
                ("comment", models.TextField()),
                (
                    "feedback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LZK.Feedback"
                    ),
                ),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LZK.Skill"
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment",
                "verbose_name_plural": "Comments",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ModuleTrack",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Module track")),
                (
                    "university",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LZK.University"
                    ),
                ),
            ],
            options={
                "verbose_name": "Module track",
                "verbose_name_plural": "module tracks",
                "ordering": ("name",),
            },
            managers=[
                ("objects", psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.AddField(
            model_name="feedback",
            name="subjects",
            field=models.ManyToManyField(to="LZK.Subject"),
        ),
        migrations.AddField(
            model_name="feedback",
            name="university",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="LZK.University"
            ),
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("salutation", models.TextField()),
                ("email", models.EmailField(max_length=254)),
                (
                    "university",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="LZK.University",
                        verbose_name="University",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="activity",
            name="competence_level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="LZK.CompetenceLevel"
            ),
        ),
        migrations.CreateModel(
            name="AbilityComment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("discarded", "Discarded"),
                            ("accepted", "Accepted"),
                        ],
                        default="open",
                        max_length=32,
                        null=True,
                    ),
                ),
                ("comment", models.TextField()),
                (
                    "ability",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LZK.Ability"
                    ),
                ),
                (
                    "feedback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="LZK.Feedback"
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment",
                "verbose_name_plural": "Comments",
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="ability",
            name="levels",
            field=models.ManyToManyField(to="LZK.Level"),
        ),
        migrations.AddField(
            model_name="ability",
            name="module_tracks",
            field=models.ManyToManyField(blank=True, to="LZK.ModuleTrack"),
        ),
        migrations.AddField(
            model_name="ability",
            name="study_field",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="LZK.StudyField",
            ),
        ),
        migrations.AddField(
            model_name="ability",
            name="subjects",
            field=models.ManyToManyField(to="LZK.Subject"),
        ),
        migrations.AddField(
            model_name="ability",
            name="systems",
            field=models.ManyToManyField(blank=True, to="LZK.System"),
        ),
        migrations.AddField(
            model_name="ability",
            name="ufids",
            field=models.ManyToManyField(to="LZK.UFID"),
        ),
        migrations.AddConstraint(
            model_name="activity",
            constraint=models.UniqueConstraint(fields=("name",), name="unique_name"),
        ),
    ]
