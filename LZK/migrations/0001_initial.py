# Generated by Django 2.2.16 on 2020-09-27 20:20

import LZK.utils
import LZK.validators
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import markupfield.fields
import psqlextra.manager.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
                'ordering': ('name',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='CompetenceLevel',
            fields=[
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('id', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Acronym')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
                ('short', models.CharField(max_length=128, verbose_name='Short')),
                ('description', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Competence level',
                'verbose_name_plural': 'Competence levels',
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Acronym')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
                'ordering': ('id',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='ModuleTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, verbose_name='Educational objective')),
            ],
            options={
                'verbose_name': 'Module track',
                'verbose_name_plural': 'module tracks',
                'ordering': ('name',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('title', models.CharField(max_length=128)),
                ('body', markupfield.fields.MarkupField(rendered_field=True)),
                ('body_markup_type', models.CharField(choices=[('', '--'), ('html', 'HTML'), ('plain', 'Plain'), ('markdown', 'Markdown'), ('restructuredtext', 'Restructured Text')], default='restructuredtext', editable=False, max_length=30)),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('_body_rendered', models.TextField(editable=False)),
                ('active', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'verbose_name': 'News',
                'verbose_name_plural': 'News',
                'ordering': ('-datetime',),
            },
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('title', models.CharField(max_length=128)),
                ('description', markupfield.fields.MarkupField(rendered_field=True)),
                ('description_markup_type', models.CharField(choices=[('', '--'), ('html', 'HTML'), ('plain', 'Plain'), ('markdown', 'Markdown'), ('restructuredtext', 'Restructured Text')], default='restructuredtext', editable=False, max_length=30)),
                ('active', models.BooleanField(default=True)),
                ('_description_rendered', models.TextField(editable=False)),
                ('image', models.ImageField(upload_to=LZK.utils.Uuid4Upload)),
            ],
            options={
                'verbose_name': 'Slide',
                'verbose_name_plural': 'Slides',
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudyField',
            fields=[
                ('id', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Acronym')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Study field',
                'verbose_name_plural': 'Study fields',
                'ordering': ('name',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Acronym')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'ordering': ('id',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Acronym')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'System',
                'verbose_name_plural': 'Systems',
                'ordering': ('name',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='UFID',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'UFID',
                'verbose_name_plural': 'UFIDs',
                'ordering': ('id',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
                ('url', models.URLField()),
                ('logo', models.FileField(upload_to=LZK.utils.Uuid4Upload, validators=[LZK.validators.FileValidator(extensions=['svg'], mimetypes=['image/svg+xml'])])),
            ],
            options={
                'verbose_name': 'University',
                'verbose_name_plural': 'Universities',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('university', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='LZK.University', verbose_name='University')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=512, verbose_name='Symptom')),
                ('subjects', models.ManyToManyField(to='LZK.Subject')),
            ],
            options={
                'verbose_name': 'Symptom',
                'verbose_name_plural': 'Symptoms',
                'ordering': ('name',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LZK.Activity')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ('name',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=512, verbose_name='Educational objective')),
                ('depth', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1'), (2, '2')], null=True, verbose_name='Depth')),
                ('subject_related', models.BooleanField(verbose_name='Subject related')),
                ('public', models.BooleanField(default=False)),
                ('levels', models.ManyToManyField(to='LZK.Level')),
                ('module_tracks', models.ManyToManyField(to='LZK.ModuleTrack')),
                ('study_field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='LZK.StudyField')),
                ('subjects', models.ManyToManyField(to='LZK.Subject')),
                ('systems', models.ManyToManyField(to='LZK.System')),
                ('ufids', models.ManyToManyField(to='LZK.UFID')),
            ],
            options={
                'verbose_name': 'Objective',
                'verbose_name_plural': 'Objectives',
                'ordering': ('name',),
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
        migrations.AddField(
            model_name='moduletrack',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LZK.University'),
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret', django_extensions.db.fields.RandomCharField(blank=True, editable=False, length=32, unique=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LZK.Subject')),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LZK.University')),
            ],
            options={
                'verbose_name': 'Feedback',
                'verbose_name_plural': 'Feedbacks',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salutation', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LZK.University', verbose_name='University')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('accepted', models.BooleanField(default=False)),
                ('comment', models.TextField()),
                ('feedback', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LZK.Feedback')),
                ('objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LZK.Objective')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
            },
        ),
        migrations.AddField(
            model_name='activity',
            name='competence_level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LZK.CompetenceLevel'),
        ),
        migrations.AddConstraint(
            model_name='activity',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_name'),
        ),
    ]
